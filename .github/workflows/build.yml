name: Main Pipeline

on:
  push

permissions:
  contents: read
  packages: read
  statuses: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  semgrep:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Upgrade pip & install Semgrep
        run: |
          python -m pip install --upgrade pip 
          pip install semgrep

      - name: Run Semgrep
        run: semgrep --config auto --error || true

      - name: Semgrep JSON report
        run: semgrep --config auto --error --json -o semgrep.json || true
      - name: Semgrep SARIF report
        run: semgrep --config auto --error --sarif -o semgrep.sarif || true
      - name: Semgrep JUnit report
        run: semgrep --config auto --error --junit-xml -o semgrep-junit.xml || true

      - name: Upload Semgrep to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        
      - name: Upload Semgrep artifacts
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-reports
          path: |
            semgrep.json
            semgrep.sarif
            semgrep-junit.xml
          
  Dependencies-and-Secrets:
    runs-on: ubuntu-latest
    needs: [semgrep]

    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout (full history for better scanning)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build app image (for image scanning)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: app-under-test:latest
          push: false
          load: true

      - name: Decide Trivy exit-code (block on main only)
        id: trivy_mode
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "code=1" >> "$GITHUB_OUTPUT"
          else
            echo "code=0" >> "$GITHUB_OUTPUT"
          fi
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: .cache/trivy
          key: trivy-db-${{ runner.os }}-${{ github.ref_name }}
          restore-keys: |
            trivy-db-${{ runner.os }}-
      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.28.0
        env:
          TRIVY_CACHE_DIR: .cache/trivy
          TRIVY_SKIP_DIRS: .git,.cache,trivy,node_modules,dist,build
          TRIVY_SCANNERS: vuln,secret,misconfig,license
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-fs.sarif
          severity: CRITICAL,HIGH,MEDIUM
          ignore-unfixed: true
          cache-dir: .cache/trivy
          exit-code: 0  


      - name: Upload SARIF (Trivy FS)
        if: always() && github.repository_owner == github.actor
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
          category: trivy-fs
          wait-for-processing: false   

      - name: Upload artifact (Trivy FS)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs
          path: trivy-fs.sarif

      - name: Trivy image scan
        uses: aquasecurity/trivy-action@0.28.0
        env:
          TRIVY_CACHE_DIR: .cache/trivy
          TRIVY_SCANNERS: vuln,secret,license
        with:
          scan-type: image
          image-ref: app-under-test:latest
          format: sarif
          output: trivy-image.sarif
          severity: CRITICAL,HIGH,MEDIUM
          ignore-unfixed: true
          cache-dir: .cache/trivy
          exit-code: 0  

      - name: Upload SARIF (Trivy Image)
        if: always() && github.repository_owner == github.actor
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
          category: trivy-image
          wait-for-processing: false   

      - name: Upload artifact (Trivy Image)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image
          path: trivy-image.sarif

      - name: "Gate — fail if Trivy FS has High/Critical"
        if: ${{ always() && github.ref == 'refs/heads/main' }}
        run: |
          jq -e '((.runs | map(.results | map(select(.level=="error")) | length) | add) // 0) == 0' trivy-fs.sarif >/dev/null || exit 1

      - name: "Gate — fail if Trivy Image has High/Critical"
        if: ${{ always() && github.ref == 'refs/heads/main' }}
        run: |
          jq -e '((.runs | map(.results | map(select(.level=="error")) | length) | add) // 0) == 0' trivy-image.sarif >/dev/null || exit 1

      - name: "Gate — fail if Trivy Image >= THRESHOLD"
        if: ${{ always() && github.ref == 'refs/heads/main' }}
        env:
          THRESHOLD: error   # error=High/Critical, warning=Medium+, note=Low+
        run: |
          case "$THRESHOLD" in
            error) JQ='select(.level=="error")' ;;
            warning) JQ='select(.level=="error" or .level=="warning")' ;;
            note) JQ='select(.level=="error" or .level=="warning" or .level=="note")' ;;
            *) echo "Invalid THRESHOLD"; exit 2 ;;
          esac
          jq -e "((.runs | map(.results | map($JQ) | length) | add) // 0) == 0" trivy-image.sarif >/dev/null || exit 1


  gitleaks:
    runs-on: ubuntu-latest
    needs:
      - semgrep
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Gitleaks
        run: |
          set -e
          VERSION=8.18.4
          curl -sSL "https://github.com/gitleaks/gitleaks/releases/download/v${VERSION}/gitleaks_${VERSION}_linux_x64.tar.gz" \
          | tar -xz -C /usr/local/bin gitleaks
          gitleaks version

      - name: Run Gitleaks (generate SARIF)
        env:
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE_KEY }}
        run: |
          # Detect secrets in the working tree (not the whole git history)
          gitleaks detect \
            --source . \
            --no-git \
            --redact \
            --report-format sarif \
            --report-path gitleaks.sarif || true

      - name: Upload Gitleaks SARIF to Code Scanning
        if: always() && github.repository_owner == github.actor
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
          category: gitleaks

  zap:
    name: ZAP
    runs-on: ubuntu-latest
    if: always() # -- will proceed kahit nag fail si gitleaks
    needs: 
        - gitleaks
        - semgrep

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build app image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: app-under-test:latest
          push: false
          load: true

      - name: Run app container
        run: docker run -d --name aut -p 8080:80 app-under-test:latest

      - name: Wait for app to be ready
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:8080/ > /dev/null; then
              echo "App is up."
              exit 0
            fi
            echo "Waiting for app... ($i/60)"
            sleep 2
          done
          echo "App did not start in time."
          docker logs aut || true
          exit 1
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: 'http://localhost:8080'
          cmd_options: '-r zap_report.html -w zap_report.md -J zap_report.json'

      - name: Upload ZAP reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            zap_report.html
            zap_report.md
            zap_report.json
      - name: Cleanup
        if: always()

        run: docker rm -f aut || true